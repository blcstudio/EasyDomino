/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['easy_domino_model.js']) {
  _$jscoverage['easy_domino_model.js'] = [];
  _$jscoverage['easy_domino_model.js'][47] = 0;
  _$jscoverage['easy_domino_model.js'][50] = 0;
  _$jscoverage['easy_domino_model.js'][53] = 0;
  _$jscoverage['easy_domino_model.js'][54] = 0;
  _$jscoverage['easy_domino_model.js'][57] = 0;
  _$jscoverage['easy_domino_model.js'][58] = 0;
  _$jscoverage['easy_domino_model.js'][62] = 0;
  _$jscoverage['easy_domino_model.js'][63] = 0;
  _$jscoverage['easy_domino_model.js'][67] = 0;
  _$jscoverage['easy_domino_model.js'][71] = 0;
  _$jscoverage['easy_domino_model.js'][74] = 0;
  _$jscoverage['easy_domino_model.js'][77] = 0;
  _$jscoverage['easy_domino_model.js'][78] = 0;
  _$jscoverage['easy_domino_model.js'][79] = 0;
  _$jscoverage['easy_domino_model.js'][80] = 0;
  _$jscoverage['easy_domino_model.js'][83] = 0;
  _$jscoverage['easy_domino_model.js'][84] = 0;
  _$jscoverage['easy_domino_model.js'][86] = 0;
  _$jscoverage['easy_domino_model.js'][87] = 0;
  _$jscoverage['easy_domino_model.js'][89] = 0;
  _$jscoverage['easy_domino_model.js'][90] = 0;
  _$jscoverage['easy_domino_model.js'][92] = 0;
  _$jscoverage['easy_domino_model.js'][106] = 0;
  _$jscoverage['easy_domino_model.js'][107] = 0;
  _$jscoverage['easy_domino_model.js'][110] = 0;
  _$jscoverage['easy_domino_model.js'][111] = 0;
  _$jscoverage['easy_domino_model.js'][112] = 0;
  _$jscoverage['easy_domino_model.js'][118] = 0;
  _$jscoverage['easy_domino_model.js'][119] = 0;
  _$jscoverage['easy_domino_model.js'][122] = 0;
  _$jscoverage['easy_domino_model.js'][125] = 0;
  _$jscoverage['easy_domino_model.js'][126] = 0;
  _$jscoverage['easy_domino_model.js'][129] = 0;
  _$jscoverage['easy_domino_model.js'][132] = 0;
  _$jscoverage['easy_domino_model.js'][133] = 0;
  _$jscoverage['easy_domino_model.js'][136] = 0;
  _$jscoverage['easy_domino_model.js'][139] = 0;
  _$jscoverage['easy_domino_model.js'][140] = 0;
  _$jscoverage['easy_domino_model.js'][143] = 0;
  _$jscoverage['easy_domino_model.js'][144] = 0;
  _$jscoverage['easy_domino_model.js'][145] = 0;
  _$jscoverage['easy_domino_model.js'][151] = 0;
  _$jscoverage['easy_domino_model.js'][155] = 0;
  _$jscoverage['easy_domino_model.js'][158] = 0;
  _$jscoverage['easy_domino_model.js'][161] = 0;
  _$jscoverage['easy_domino_model.js'][162] = 0;
  _$jscoverage['easy_domino_model.js'][165] = 0;
  _$jscoverage['easy_domino_model.js'][166] = 0;
  _$jscoverage['easy_domino_model.js'][167] = 0;
  _$jscoverage['easy_domino_model.js'][168] = 0;
  _$jscoverage['easy_domino_model.js'][169] = 0;
  _$jscoverage['easy_domino_model.js'][172] = 0;
  _$jscoverage['easy_domino_model.js'][173] = 0;
  _$jscoverage['easy_domino_model.js'][174] = 0;
  _$jscoverage['easy_domino_model.js'][175] = 0;
  _$jscoverage['easy_domino_model.js'][177] = 0;
  _$jscoverage['easy_domino_model.js'][178] = 0;
  _$jscoverage['easy_domino_model.js'][183] = 0;
  _$jscoverage['easy_domino_model.js'][184] = 0;
  _$jscoverage['easy_domino_model.js'][186] = 0;
  _$jscoverage['easy_domino_model.js'][188] = 0;
  _$jscoverage['easy_domino_model.js'][189] = 0;
  _$jscoverage['easy_domino_model.js'][191] = 0;
  _$jscoverage['easy_domino_model.js'][196] = 0;
}
_$jscoverage['easy_domino_model.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\"> * @file easy_domin_model.js</span>","<span class=\"c\"> * @version 0.1.1</span>","<span class=\"c\"> * @author ginger</span>","<span class=\"c\"> * @brief easy domino model javascript part</span>","<span class=\"c\"> */</span>"," ","<span class=\"c\">/*</span>","<span class=\"c\"> * @interface</span>","<span class=\"c\"> * Bone(n1, n2) </span>","<span class=\"c\"> * \t\t\t\t: \t- n1 and n2 are the two number in the bone</span>","<span class=\"c\"> * \t\t\t\t: getNum1() - get the smaller number</span>","<span class=\"c\"> *\t\t\t\t: getNum2() - get the bigger number</span>","<span class=\"c\"> * Boneyard(_branchends, _playerNames, _scores, _strategy) </span>","<span class=\"c\"> * \t\t\t\t: \t- _branchends \t= [0, 0] if null</span>","<span class=\"c\"> *\t\t\t\t\t- _playerNames \t\t= ['player1'] if null</span>","<span class=\"c\"> *\t\t\t\t\t- _scores \t\t= [] if null</span>","<span class=\"c\"> * \t\t\t\t\t- _strategy\t\t= always return 1</span>","<span class=\"c\"> * \t\t\t\t\t_strategy should be an object with function signed </span>","<span class=\"c\"> * \t\t\t\t\tgetScoreForSend(branchendIndex, bone, direct), which return the score the player</span>","<span class=\"c\"> * \t\t\t\t\tshould earn by send target bone to target branchend in target direction</span>","<span class=\"c\"> * \t\t\t\t: getBranchends() \t- get branchend list</span>","<span class=\"c\"> * \t\t\t\t: getPlayers() \t\t- get player list</span>","<span class=\"c\"> * \t\t\t\t: getScores() \t\t- get socre list</span>","<span class=\"c\"> * \t\t\t\t: sendToBranchend(branchendIndex, bone, direct, playerName) </span>","<span class=\"c\"> * \t\t\t\t\t- send a bone to target branchend, horizontal('h') or vertical('v')</span>","<span class=\"c\"> *\t\t\t\t\t- by target player. And vertical direction means this bone will be a spinner.</span>","<span class=\"c\"> * \t\t\t\t: scoreTo(playerName, score) </span>","<span class=\"c\"> * \t\t\t\t\t- add target score to target player, score can be negative</span>","<span class=\"c\"> *\t\t\t\t\t- score must be integer cause js has problem when dealing with float</span>","<span class=\"c\"> * \t\t\t\t\t- float will be deal with parseInt(), which means [-]10.9 === [-]10</span>","<span class=\"c\"> * Player(_playerName, _bones)</span>","<span class=\"c\"> * \t\t\t\t:\t- _playerName\t= 'player1' if null</span>","<span class=\"c\"> * \t\t\t\t\t- _bones\t\t= [] if null</span>","<span class=\"c\"> * \t\t\t\t: getPlayerName()\t- getter</span>","<span class=\"c\"> * \t\t\t\t: getPlayerBones()\t- getter</span>","<span class=\"c\"> * \t\t\t\t: addBones(newbones)</span>","<span class=\"c\"> * \t\t\t\t\t- add bones to player's bones in hand</span>","<span class=\"c\"> * \t\t\t\t: setBones(newbones)</span>","<span class=\"c\"> * \t\t\t\t\t- set player's bones in hand</span>","<span class=\"c\"> * \t\t\t\t: removeBone(boneIndex)</span>","<span class=\"c\"> * \t\t\t\t\t- remove target bone from player's bones in hand</span>","<span class=\"c\"> * \t\t\t\t\t- return bone removed</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/* bone class */</span>","<span class=\"k\">var</span> Bone  <span class=\"k\">=</span> <span class=\"k\">{</span>","\tcreateNew<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>n1<span class=\"k\">,</span> n2<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// create</span>","\t\t<span class=\"k\">var</span> object <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">// private</span>","\t\t<span class=\"k\">var</span> num1<span class=\"k\">;</span>","\t\t<span class=\"k\">var</span> num2<span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">// public</span>","\t\tobject<span class=\"k\">.</span>getNum1 <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> num1<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>getNum2 <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> num2<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">// constructor</span>","\t\t<span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>n1 <span class=\"k\">&lt;</span> n2<span class=\"k\">)</span> <span class=\"k\">{</span> num1 <span class=\"k\">=</span> n1<span class=\"k\">;</span> num2 <span class=\"k\">=</span> n2<span class=\"k\">;</span> <span class=\"k\">}</span>","\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span> num1 <span class=\"k\">=</span> n2<span class=\"k\">;</span> num2 <span class=\"k\">=</span> n1<span class=\"k\">;</span> <span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t","\t\t<span class=\"c\">// return</span>","\t\t<span class=\"k\">return</span> object<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/* boneyard class */</span>","<span class=\"k\">var</span> Boneyard <span class=\"k\">=</span> <span class=\"k\">{</span>","\tcreateNew<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>_branchends<span class=\"k\">,</span> _players<span class=\"k\">,</span> _scores<span class=\"k\">,</span> _strategy<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// create</span>","\t\t<span class=\"k\">var</span> object <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">// private</span>","\t\t<span class=\"k\">var</span> branchends<span class=\"k\">;</span>\t<span class=\"c\">// branch end list</span>","\t\t<span class=\"k\">var</span> players<span class=\"k\">;</span>\t<span class=\"c\">// player list</span>","\t\t<span class=\"k\">var</span> scores<span class=\"k\">;</span>\t\t<span class=\"c\">// score list</span>","\t\t<span class=\"k\">var</span> strategy<span class=\"k\">;</span>\t<span class=\"c\">// strategy for score</span>","\t\t","\t\t<span class=\"c\">// public</span>","\t\tobject<span class=\"k\">.</span>getBranchends \t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">return</span> branchends<span class=\"k\">;</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>getPlayers\t\t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">return</span> players<span class=\"k\">;</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>getScores \t\t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">return</span> scores<span class=\"k\">;</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>sendToBranchend\t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>branchendIndex<span class=\"k\">,</span> bone<span class=\"k\">,</span> direct<span class=\"k\">,</span> playerName<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"c\">/*var oldend = branchends[branchendIndex], newend;</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\t// check number</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\tif (bone.getNum1() === oldend) { newend = bone.getNum2(); }</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\telse if (bone.getNum2() === oldend) { newend = bone.getNum1(); }</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\telse { throw new Error('Wrong bone !'); }</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\t// check direction</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\tif (direct === 'h') {</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\t\tbranchends[branchendIndex] = newend;</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\t} else if (direct === 'v') {</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\t\tbranchends[branchendIndex] = newend;</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\t\tbranchends[branchends.length] = newend;</span>","<span class=\"c\">\t\t\t\t\t\t\t\t\t\t\t} else { throw new Error('Wrong direction !'); }*/</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"c\">// score if strategy exists</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>strategy <span class=\"k\">!==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>scoreTo<span class=\"k\">(</span>playerName<span class=\"k\">,</span> strategy<span class=\"k\">.</span>getScoreForSend<span class=\"k\">(</span>branchendIndex<span class=\"k\">,</span> bone<span class=\"k\">,</span> direct<span class=\"k\">));</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>scoreTo\t\t\t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>playerName<span class=\"k\">,</span> score<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>scores<span class=\"k\">[</span>playerName<span class=\"k\">])</span> <span class=\"k\">===</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span> scores<span class=\"k\">[</span>playerName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"k\">}</span>","\t\t\t\t\t\t\t\t\t\t\tscores<span class=\"k\">[</span>playerName<span class=\"k\">]</span> <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>scores<span class=\"k\">[</span>playerName<span class=\"k\">])</span> <span class=\"k\">+</span> parseInt<span class=\"k\">(</span>score<span class=\"k\">);</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">// constructor </span>","\t\t<span class=\"k\">{</span>","\t\t\t<span class=\"c\">// parameters</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_branchends <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>_branchends<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tbranchends \t<span class=\"k\">=</span> _branchends<span class=\"k\">.</span>slice<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// default branchends</span>","\t\t\t\tbranchends \t<span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">];</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_players <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>_players<span class=\"k\">)</span> \t<span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tplayers <span class=\"k\">=</span> _players<span class=\"k\">.</span>slice<span class=\"k\">();</span>\t","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// default players</span>","\t\t\t\tplayers <span class=\"k\">=</span> <span class=\"k\">[</span>Player<span class=\"k\">.</span>createNew<span class=\"k\">()];</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_scores \t<span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>_scores<span class=\"k\">)</span> \t<span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tscores \t\t<span class=\"k\">=</span> _scores<span class=\"k\">.</span>slice<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// default scores</span>","\t\t\t\tscores <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_strategy \t<span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>_strategy<span class=\"k\">)</span> \t<span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tstrategy\t<span class=\"k\">=</span> _strategy<span class=\"k\">;</span> ","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// default strategy</span>","\t\t\t\tstrategy \t<span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t\t\tstrategy<span class=\"k\">.</span>getScoreForSend <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>branchendIndex<span class=\"k\">,</span> bone<span class=\"k\">,</span> direct<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t","\t\t<span class=\"c\">// return</span>","\t\t<span class=\"k\">return</span> object<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/* player class */</span>","<span class=\"k\">var</span> Player  <span class=\"k\">=</span> <span class=\"k\">{</span>","\tcreateNew<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>_playerName<span class=\"k\">,</span> _bones<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// create</span>","\t\t<span class=\"k\">var</span> object <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">// private</span>","\t\t<span class=\"k\">var</span> playerName<span class=\"k\">;</span>\t\t<span class=\"c\">// player name</span>","\t\t<span class=\"k\">var</span> bones<span class=\"k\">;</span>\t\t\t<span class=\"c\">// bones the player holding in hand</span>","\t\t","\t\t<span class=\"c\">// public</span>","\t\tobject<span class=\"k\">.</span>getPlayerName \t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> playerName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>getPlayerBones \t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> bones<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>addBones\t\t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>newbones<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> newbones<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\tbones<span class=\"k\">.</span>push<span class=\"k\">(</span>newbones<span class=\"k\">[</span>i<span class=\"k\">]);</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>setBones\t\t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>newbones<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>newbones <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>newbones<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t\tbones <span class=\"k\">=</span> newbones","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'Wrong new bones !'</span><span class=\"k\">);</span> <span class=\"k\">}</span>","\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\tobject<span class=\"k\">.</span>removeBone\t\t<span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>boneIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">return</span> bones<span class=\"k\">.</span>splice<span class=\"k\">(</span>boneIndex<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">// constructor</span>","\t\t<span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_playerName <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>_playerName<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tplayerName \t<span class=\"k\">=</span> _playerName<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\tplayerName \t<span class=\"k\">=</span> <span class=\"s\">'player1'</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_bones\t\t<span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>_bones<span class=\"k\">)</span>\t\t<span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tbones \t\t<span class=\"k\">=</span> _bones<span class=\"k\">.</span>slice<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\tbones \t\t<span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t","\t\t<span class=\"c\">// return</span>","\t\t<span class=\"k\">return</span> object<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>",""];
_$jscoverage['easy_domino_model.js'][47]++;
var Bone = {createNew: (function (n1, n2) {
  _$jscoverage['easy_domino_model.js'][50]++;
  var object = {};
  _$jscoverage['easy_domino_model.js'][53]++;
  var num1;
  _$jscoverage['easy_domino_model.js'][54]++;
  var num2;
  _$jscoverage['easy_domino_model.js'][57]++;
  object.getNum1 = (function () {
  _$jscoverage['easy_domino_model.js'][57]++;
  return num1;
});
  _$jscoverage['easy_domino_model.js'][58]++;
  object.getNum2 = (function () {
  _$jscoverage['easy_domino_model.js'][58]++;
  return num2;
});
  _$jscoverage['easy_domino_model.js'][62]++;
  if ((n1 < n2)) {
    _$jscoverage['easy_domino_model.js'][62]++;
    num1 = n1;
    _$jscoverage['easy_domino_model.js'][62]++;
    num2 = n2;
  }
  else {
    _$jscoverage['easy_domino_model.js'][63]++;
    num1 = n2;
    _$jscoverage['easy_domino_model.js'][63]++;
    num2 = n1;
  }
  _$jscoverage['easy_domino_model.js'][67]++;
  return object;
})};
_$jscoverage['easy_domino_model.js'][71]++;
var Boneyard = {createNew: (function (_branchends, _players, _scores, _strategy) {
  _$jscoverage['easy_domino_model.js'][74]++;
  var object = {};
  _$jscoverage['easy_domino_model.js'][77]++;
  var branchends;
  _$jscoverage['easy_domino_model.js'][78]++;
  var players;
  _$jscoverage['easy_domino_model.js'][79]++;
  var scores;
  _$jscoverage['easy_domino_model.js'][80]++;
  var strategy;
  _$jscoverage['easy_domino_model.js'][83]++;
  object.getBranchends = (function () {
  _$jscoverage['easy_domino_model.js'][84]++;
  return branchends;
});
  _$jscoverage['easy_domino_model.js'][86]++;
  object.getPlayers = (function () {
  _$jscoverage['easy_domino_model.js'][87]++;
  return players;
});
  _$jscoverage['easy_domino_model.js'][89]++;
  object.getScores = (function () {
  _$jscoverage['easy_domino_model.js'][90]++;
  return scores;
});
  _$jscoverage['easy_domino_model.js'][92]++;
  object.sendToBranchend = (function (branchendIndex, bone, direct, playerName) {
  _$jscoverage['easy_domino_model.js'][106]++;
  if ((strategy !== null)) {
    _$jscoverage['easy_domino_model.js'][107]++;
    this.scoreTo(playerName, strategy.getScoreForSend(branchendIndex, bone, direct));
  }
});
  _$jscoverage['easy_domino_model.js'][110]++;
  object.scoreTo = (function (playerName, score) {
  _$jscoverage['easy_domino_model.js'][111]++;
  if (((typeof scores[playerName]) === "undefined")) {
    _$jscoverage['easy_domino_model.js'][111]++;
    scores[playerName] = 0;
  }
  _$jscoverage['easy_domino_model.js'][112]++;
  scores[playerName] = (parseInt(scores[playerName]) + parseInt(score));
});
  _$jscoverage['easy_domino_model.js'][118]++;
  if (((_branchends !== null) && ((typeof _branchends) !== "undefined"))) {
    _$jscoverage['easy_domino_model.js'][119]++;
    branchends = _branchends.slice();
  }
  else {
    _$jscoverage['easy_domino_model.js'][122]++;
    branchends = [0, 0];
  }
  _$jscoverage['easy_domino_model.js'][125]++;
  if (((_players !== null) && ((typeof _players) !== "undefined"))) {
    _$jscoverage['easy_domino_model.js'][126]++;
    players = _players.slice();
  }
  else {
    _$jscoverage['easy_domino_model.js'][129]++;
    players = [Player.createNew()];
  }
  _$jscoverage['easy_domino_model.js'][132]++;
  if (((_scores !== null) && ((typeof _scores) !== "undefined"))) {
    _$jscoverage['easy_domino_model.js'][133]++;
    scores = _scores.slice();
  }
  else {
    _$jscoverage['easy_domino_model.js'][136]++;
    scores = [];
  }
  _$jscoverage['easy_domino_model.js'][139]++;
  if (((_strategy !== null) && ((typeof _strategy) !== "undefined"))) {
    _$jscoverage['easy_domino_model.js'][140]++;
    strategy = _strategy;
  }
  else {
    _$jscoverage['easy_domino_model.js'][143]++;
    strategy = {};
    _$jscoverage['easy_domino_model.js'][144]++;
    strategy.getScoreForSend = (function (branchendIndex, bone, direct) {
  _$jscoverage['easy_domino_model.js'][145]++;
  return 1;
});
  }
  _$jscoverage['easy_domino_model.js'][151]++;
  return object;
})};
_$jscoverage['easy_domino_model.js'][155]++;
var Player = {createNew: (function (_playerName, _bones) {
  _$jscoverage['easy_domino_model.js'][158]++;
  var object = {};
  _$jscoverage['easy_domino_model.js'][161]++;
  var playerName;
  _$jscoverage['easy_domino_model.js'][162]++;
  var bones;
  _$jscoverage['easy_domino_model.js'][165]++;
  object.getPlayerName = (function () {
  _$jscoverage['easy_domino_model.js'][165]++;
  return playerName;
});
  _$jscoverage['easy_domino_model.js'][166]++;
  object.getPlayerBones = (function () {
  _$jscoverage['easy_domino_model.js'][166]++;
  return bones;
});
  _$jscoverage['easy_domino_model.js'][167]++;
  object.addBones = (function (newbones) {
  _$jscoverage['easy_domino_model.js'][168]++;
  for (var i = 0; (i < newbones.length); (i++)) {
    _$jscoverage['easy_domino_model.js'][169]++;
    bones.push(newbones[i]);
}
});
  _$jscoverage['easy_domino_model.js'][172]++;
  object.setBones = (function (newbones) {
  _$jscoverage['easy_domino_model.js'][173]++;
  if (((newbones !== null) && ((typeof newbones) !== "undefined"))) {
    _$jscoverage['easy_domino_model.js'][174]++;
    bones = newbones;
  }
  else {
    _$jscoverage['easy_domino_model.js'][175]++;
    throw new Error("Wrong new bones !");
  }
});
  _$jscoverage['easy_domino_model.js'][177]++;
  object.removeBone = (function (boneIndex) {
  _$jscoverage['easy_domino_model.js'][178]++;
  return bones.splice(boneIndex, 1)[0];
});
  _$jscoverage['easy_domino_model.js'][183]++;
  if (((_playerName !== null) && ((typeof _playerName) !== "undefined"))) {
    _$jscoverage['easy_domino_model.js'][184]++;
    playerName = _playerName;
  }
  else {
    _$jscoverage['easy_domino_model.js'][186]++;
    playerName = "player1";
  }
  _$jscoverage['easy_domino_model.js'][188]++;
  if (((_bones !== null) && ((typeof _bones) !== "undefined"))) {
    _$jscoverage['easy_domino_model.js'][189]++;
    bones = _bones.slice();
  }
  else {
    _$jscoverage['easy_domino_model.js'][191]++;
    bones = [];
  }
  _$jscoverage['easy_domino_model.js'][196]++;
  return object;
})};
